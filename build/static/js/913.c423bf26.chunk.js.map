{"version":3,"file":"static/js/913.c423bf26.chunk.js","mappings":"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","sources":["daily-v2/components/Links.tsx","daily-v2/DailyV2.tsx"],"sourcesContent":["import { useEffect, useState } from 'react';\r\nimport './links.sass';\r\n\r\nconst links = [\r\n    {\r\n        name: 'Wordle (ES)',\r\n        url: 'https://lapalabradeldia.com',\r\n        icon: 'https://wordly.org/favicon-32x32.png'\r\n    },\r\n    {\r\n        name: 'Wordle (EN)',\r\n        url: 'https://www.nytimes.com/games/wordle/index.html',\r\n        icon: 'https://www.nytimes.com/games-assets/v2/metadata/wordle-favicon.ico?v=v2208011150',\r\n    },\r\n    {\r\n        name: 'Worldle',\r\n        url: 'https://worldle.teuteuf.fr/',\r\n        icon: 'https://worldle.teuteuf.fr/logo192.png'\r\n    },\r\n    {\r\n        name: 'Framed',\r\n        url: 'https://framed.wtf/',\r\n        icon: 'https://framed.wtf/favicon.ico'\r\n    },\r\n    {\r\n        name: 'Flagdle',\r\n        url: 'https://www.flagdle.org/',\r\n        icon: 'https://www.flagdle.org/favicon-16x16.png'\r\n    },\r\n    {\r\n        name: 'Flagdle',\r\n        url: 'https://www.flagdle.app/',\r\n        icon: 'https://www.flagdle.app/logo192.png'\r\n    },\r\n    {\r\n        name: 'Flagdle',\r\n        url: 'https://www.flagle.io/',\r\n        icon: 'https://www.flagle.io/favicon.ico'\r\n    }\r\n]\r\n\r\nconst GIPHY_API_KEY = 'lKqBhAgeKOGx2rJveh7LZJpvgRUpz8ss';\r\n\r\nexport const Links = () => {\r\n    const [currentIndexLink, setCurrentIndexLink] = useState(0);\r\n    const [complete, setComplete] = useState(false);\r\n    const [randomGif, setRandomGif] = useState(null);\r\n\r\n    const handleClickLink = () => {\r\n        window.open(links[currentIndexLink].url);\r\n\r\n        const nextIndex = currentIndexLink + 1;\r\n\r\n        if (nextIndex <= links.length - 1) {\r\n            setCurrentIndexLink(nextIndex)\r\n        } else {\r\n            setComplete(true);\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        getRandomGif()\r\n    }, []);\r\n\r\n    const getGif = async () => {\r\n        const randomGifResponse = await fetch(`https://api.giphy.com/v1/randomid?api_key=${GIPHY_API_KEY}`);\r\n        const { data: { random_id } } = await randomGifResponse.json();\r\n\r\n        const giphyApiSearchUrl = `https://api.giphy.com/v1/gifs/search?random_id=${random_id}&api_key=${GIPHY_API_KEY}&q=congratulations&limit=1&offset=0&rating=g&lang=es&bundle=messaging_non_clips`;\r\n        const response = await fetch(giphyApiSearchUrl);\r\n        const { data: [{ images: { original: { url }} }]} = await response.json();\r\n\r\n        console.log(url);\r\n        setRandomGif(url)\r\n    }\r\n\r\n    const getRandomGif = async () => {\r\n\r\n        const randomGifResponse = await fetch(`https://api.giphy.com/v1/randomid?api_key=${GIPHY_API_KEY}`);\r\n        const { data: { random_id } } = await randomGifResponse.json();\r\n\r\n        if (random_id) {\r\n            const getGifResponse = await fetch(`https://api.giphy.com/v1/gifs/random?random_id=${random_id}&api_key=${GIPHY_API_KEY}&tag=congratulations`);\r\n            const { data: { images: { original: { url }} }} = await getGifResponse.json();\r\n            console.log(url);\r\n            setRandomGif(url)\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className=\"links-container\">\r\n                {!complete &&\r\n                    <div className=\"link\" onClick={handleClickLink}>\r\n                        {links[currentIndexLink].icon && <img src={links[currentIndexLink].icon} alt={links[currentIndexLink].name} />}\r\n                        <p>{links[currentIndexLink].name}</p>\r\n                    </div>\r\n                }\r\n                {\r\n                    complete && randomGif && <div className=\"link-complete\">\r\n                        <img src={randomGif} alt=\"gif\" />\r\n                    </div>\r\n                }\r\n        </div>\r\n    )\r\n}\r\n","import { Fragment, useEffect, useState } from 'react';\nimport './DailyV2.sass';\nimport { Links } from './components/Links';\nimport Game from '../Game/Game';\n\ninterface Link {\n    name: string;\n    url: string;\n    icon: string;\n}\n\nconst steps = [\n    {\n        index: 0,\n        name: 'Games'\n    },\n    {\n        index: 1,\n        name: 'Daily'\n    },\n    {\n        index: 2,\n        name: 'Issues'\n    },\n    {\n        index: 3,\n        name: 'Defectos'\n    },\n    {\n        index: 4,\n        name: 'Nuevos desarrollos'\n    },\n    {\n        index: 5,\n        name: 'Dudas'\n    },\n]\n\nconst DailyV2 = () => {\n    const [users, setUsers] = useState<string[]>([]);\n    const [state, setState] = useState('ready');\n    const [dropState, setDropState] = useState('no-dealing');\n    const [currentStep, setCurrentStep] = useState(steps[0]);\n\n    const [configUsers, setConfigUsers] = useState(false);\n    const [usersForm, setUsersForm] = useState<string[]>([]);\n\n    const cards = [...Array(10)];\n\n    useEffect(() => {\n        const localUsers = localStorage.getItem('users');\n        const usersParsed = localUsers ? JSON.parse(localUsers) : [];\n\n        setUsers(usersParsed);\n        setUsersForm(usersParsed);\n    }, []);\n\n    const start = () => {\n        setDropState('no-dealing')\n        setState('shuffling');\n        setTimeout(() => {\n            const usersClone = [...users].sort(() => Math.random() - 0.5);\n            setUsers(usersClone);\n            setState('shuffled');\n\n            setTimeout(() => {\n                setDropState('dealing')\n                setTimeout(() => {\n                    setDropState('distributed');\n                }, 1500);\n            }, 500)\n        }, ((cards.length - 1) * 250) + 500);\n    };\n\n    const openConfig = () => {\n        setConfigUsers(!configUsers);\n    };\n\n    const updateUser = (newUserValue: string, index: number) => {\n        const _userForm = [...usersForm];\n        _userForm[index] = newUserValue;\n        setUsersForm([..._userForm]);\n    };\n\n    const removeUser = (index: number) => {\n        const _users = [...usersForm];\n        _users.splice(index, 1);\n        setUsersForm([..._users]);\n    };\n\n    const saveUsers = () => {\n        setState('ready');\n        setConfigUsers(false);\n        setUsersForm([...usersForm]);\n        setUsers([...usersForm]);\n\n        localStorage.setItem('users', JSON.stringify(usersForm));\n    };\n\n    const addNewUser = () => {\n        setUsersForm([...usersForm, ''])\n    };\n\n    const handleClickLink = (url: string) => {\n        window.open(url, '_blank');\n    };\n\n\n    const nextStep = () => {\n        const nextIndex = currentStep.index + 1;\n        if (nextIndex <= steps[steps.length - 1].index) {\n            setCurrentStep(steps[currentStep.index + 1])\n        }\n    };\n\n    const backStep = () => {\n        const previousIndex = currentStep.index - 1;\n        if (previousIndex !== -1) {\n            setCurrentStep(steps[currentStep.index - 1])\n        }\n    };\n\n    return (\n        <div className=\"container\">\n            <div className=\"wrapper\">\n                <div className=\"stepper-container\">\n                    <h1>Steps</h1>\n                    <div className=\"steps\">\n                        {!!steps.length && steps.map((step, index) => (\n                            <Fragment key={`step-${index}`}>\n                                <div className={`step ${currentStep.index > step.index ? 'done' : ''} ${currentStep.index === step.index ? 'active' : ''}`} key={`step-${index}`}>\n                                    <div className=\"icon\">{index + 1}</div>\n                                    <div className=\"text\">{step.name}</div>\n                                </div>\n                                {(index < steps.length - 1) && <div className=\"line\"></div>}\n                            </Fragment>\n                        ))}\n\n                        <div className=\"step-buttons\">\n                            <button className=\"button\" onClick={backStep}>\n                                <span>Back</span>\n                            </button>\n                            <button className=\"button\" onClick={nextStep}>\n                                <span>Next</span>\n                            </button>\n                        </div>\n\n                    </div>\n                </div>\n\n                <div className=\"main\">\n                    <div className=\"title\">\n                        <span>{currentStep.name}</span>\n                    </div>\n                    {currentStep.name === 'Daily' && <div className=\"daily-game \">\n                        <Game />\n                    </div>\n                    }\n\n                    {/* TODO: ALL DAILY CARD */}\n                    {\n                    // currentStep.name === 'Daily' && <div className=\"daily\">\n\n                    //     <div className=\"buttons\">\n                    //         <button className=\"button\" onClick={start}>\n                    //             <span>Shuffle</span>\n                    //         </button>\n                    //         <button className=\"button\" onClick={openConfig}>\n                    //             <span>Config users</span>\n                    //         </button>\n\n                    //         {/* TODO: CONDIF Links <button className=\"button\" onClick={openConfig}>\n                    //             <span>Config Links</span>\n                    //         </button> */}\n\n                    //         { configUsers &&\n                    //             <div className=\"config-users\">\n                    //                 <div className=\"users\">\n                    //                     { usersForm.map(((userValue, index) => (\n                    //                         <div className=\"user\" key={`config-user-${index}`}>\n                    //                             <input value={userValue} onChange={(e) => updateUser(e.target.value, index)} />\n                    //                             <button className=\"button small\" onClick={() => removeUser(index)}>\n                    //                                 <span>-</span>\n                    //                             </button>\n                    //                         </div>\n                    //                     ))) }\n                    //                 </div>\n\n                    //                 <div className=\"config-buttons\">\n                    //                     <button className=\"button small\" onClick={addNewUser}>\n                    //                         <span>+</span>\n                    //                     </button>\n\n                    //                     <button className=\"button\" onClick={saveUsers}>\n                    //                         <span>Save</span>\n                    //                     </button>\n\n                    //                 </div>\n                    //             </div>\n                    //         }\n                    //     </div>\n\n                    //     <div className=\"cards\">\n                    //         { cards.map((_, index) =>\n                    //             <div\n                    //                 onClick={start}\n                    //                 className={state === 'shuffling' ? 'card flip animate' : 'card flip'}\n                    //                 style={{\n                    //                     left: 50 + -(index * 1) + 'px',\n                    //                     top: 40 + -(index * 1) + 'px',\n                    //                     animationDelay: -(index * 0.25) + ((cards.length - 1) * 0.25) + 's',\n                    //                 }}\n                    //                 key={`card-${index}`}\n                    //             >\n                    //                 <div className=\"inner\">\n                    //                     <div className=\"front\">\n                    //                         <div className=\"text\"></div>\n                    //                     </div>\n                    //                     <div className=\"back\"></div>\n                    //                 </div>\n                    //             </div>\n                    //         )}\n                    //         { state === 'shuffled' &&\n                    //             users.map((user, index) => (\n                    //                 <div\n                    //                     className={dropState === 'distributed' ? 'card' : 'card flip-reverse'}\n                    //                     key={`user-card-${user}`}\n                    //                     style={{\n                    //                         left: (dropState === 'dealing' || dropState === 'distributed') ? (400 + -(cards.length -1)) + (index * 200) + 'px' : 50 + -((cards.length -1) * 1) + 'px',\n                    //                         top: 40 + -((cards.length -1) * 1) + 'px',\n                    //                         transitionDelay: -(index * 0.25) + ((users.length - 1) * 0.25) + 's',\n                    //                     }}\n                    //                 >\n                    //                     <div className=\"inner\"\n                    //                         style={{\n                    //                             transitionDelay: -(index * 0.75) + ((users.length - 1) * 0.75) + 's',\n                    //                         }}\n                    //                     >\n                    //                         <div className=\"front\">\n                    //                             <div className=\"text\">{user}</div>\n                    //                         </div>\n                    //                         <div className=\"back\"></div>\n                    //                     </div>\n                    //                 </div>\n                    //             ))\n                    //         }\n                    //     </div>\n                    // </div>\n                    }\n\n                    {currentStep.name === 'Games' && <div className=\"daily-links\">\n                        <Links />\n                    </div>}\n\n                    {currentStep.name === 'Issues' && <div className=\"issues\">\n                        <a className='anchor-link' href=\"https://ezzingsolar.atlassian.net/jira/dashboards/10011\" target='_blank' rel=\"noreferrer\">Jira Issues dashboard</a>\n                    </div>}\n\n                    {currentStep.name === 'Defectos' && <div className=\"defectos\">\n                        <p className='anchor-link'>Defectos</p>\n                    </div>}\n\n                    {currentStep.name === 'Nuevos desarrollos' && <div className=\"defectos\">\n                        <p className='anchor-link'>Nuevos desarrollos</p>\n                    </div>}\n\n                    {currentStep.name === 'Dudas' && <div className=\"defectos\">\n                        <p className='anchor-link'>Dudas</p>\n                    </div>}\n                </div>\n\n            </div>\n        </div>\n    )\n}\nexport default DailyV2;\n"],"names":["links","name","url","icon","GIPHY_API_KEY","Links","useState","currentIndexLink","setCurrentIndexLink","complete","setComplete","randomGif","setRandomGif","useEffect","getRandomGif","fetch","randomGifResponse","json","random_id","data","getGifResponse","images","original","console","log","className","onClick","window","open","nextIndex","length","src","alt","steps","index","setUsers","currentStep","setCurrentStep","setUsersForm","Array","localUsers","localStorage","getItem","usersParsed","JSON","parse","map","step","Fragment","Game","href","target","rel"],"sourceRoot":""}